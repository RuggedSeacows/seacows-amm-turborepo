# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AmmPool {
  """对应的链"""
  chain: String!

  """对应的 NFT 的合约地址"""
  collectionAddress: String!
  createdAt: DateTime!

  """创建者的钱包地址"""
  createdBy: String!
  id: ID!

  """池子的合约地址"""
  poolAddress: String!

  """当前的状态"""
  state: PoolState!

  """对应的 Token 的合约地址"""
  tokenAddress: String!
  txHash: String!
  updatedAt: DateTime!
}

input AmmPoolCreateInput {
  chain: String!
  collectionAddress: String!
  createdAt: DateTime
  createdBy: String!
  id: String
  poolAddress: String!
  state: PoolState
  tokenAddress: String!
  txHash: String!
  updatedAt: DateTime
}

input AmmPoolWhereInput {
  AND: [AmmPoolWhereInput!]
  NOT: [AmmPoolWhereInput!]
  OR: [AmmPoolWhereInput!]
  chain: StringFilter
  collectionAddress: StringFilter
  createdAt: DateTimeFilter
  createdBy: StringFilter
  id: StringFilter
  poolAddress: StringFilter
  state: EnumPoolStateFilter
  tokenAddress: StringFilter
  txHash: StringFilter
  updatedAt: DateTimeFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumPoolStateFilter {
  equals: PoolState
  in: [PoolState!]
  not: NestedEnumPoolStateFilter
  notIn: [PoolState!]
}

type Mutation {
  createPool(data: AmmPoolCreateInput!): AmmPool!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumPoolStateFilter {
  equals: PoolState
  in: [PoolState!]
  not: NestedEnumPoolStateFilter
  notIn: [PoolState!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

enum PoolState {
  Approved
  Created
  Rejected
}

type Query {
  queryPoolById(id: String!): AmmPool!
  queryPools(skip: Int!, take: Int = 10, where: AmmPoolWhereInput!): [AmmPool!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  poolStatusUpdate: AmmPool!
}